// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/ZhdanovichVlad/service-podof/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// CityExists mocks base method.
func (m *Mockrepository) CityExists(ctx context.Context, city string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityExists", ctx, city)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityExists indicates an expected call of CityExists.
func (mr *MockrepositoryMockRecorder) CityExists(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityExists", reflect.TypeOf((*Mockrepository)(nil).CityExists), ctx, city)
}

// CloseReception mocks base method.
func (m *Mockrepository) CloseReception(ctx context.Context, pvzUUID uuid.UUID) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReception", ctx, pvzUUID)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseReception indicates an expected call of CloseReception.
func (mr *MockrepositoryMockRecorder) CloseReception(ctx, pvzUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReception", reflect.TypeOf((*Mockrepository)(nil).CloseReception), ctx, pvzUUID)
}

// CreateProduct mocks base method.
func (m *Mockrepository) CreateProduct(ctx context.Context, product *entity.Product, pvzID uuid.UUID) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, product, pvzID)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockrepositoryMockRecorder) CreateProduct(ctx, product, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*Mockrepository)(nil).CreateProduct), ctx, product, pvzID)
}

// CreatePvz mocks base method.
func (m *Mockrepository) CreatePvz(ctx context.Context, PvzRequestBodyCreate *entity.Pvz) (*entity.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePvz", ctx, PvzRequestBodyCreate)
	ret0, _ := ret[0].(*entity.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePvz indicates an expected call of CreatePvz.
func (mr *MockrepositoryMockRecorder) CreatePvz(ctx, PvzRequestBodyCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePvz", reflect.TypeOf((*Mockrepository)(nil).CreatePvz), ctx, PvzRequestBodyCreate)
}

// CreateReception mocks base method.
func (m *Mockrepository) CreateReception(ctx context.Context, reception *entity.Reception) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, reception)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockrepositoryMockRecorder) CreateReception(ctx, reception interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*Mockrepository)(nil).CreateReception), ctx, reception)
}

// CreateUser mocks base method.
func (m *Mockrepository) CreateUser(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockrepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Mockrepository)(nil).CreateUser), ctx, user)
}

// DeleteLastProduct mocks base method.
func (m *Mockrepository) DeleteLastProduct(ctx context.Context, pvzUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", ctx, pvzUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockrepositoryMockRecorder) DeleteLastProduct(ctx, pvzUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*Mockrepository)(nil).DeleteLastProduct), ctx, pvzUUID)
}

// GetAllPvz mocks base method.
func (m *Mockrepository) GetAllPvz(ctx context.Context) ([]entity.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPvz", ctx)
	ret0, _ := ret[0].([]entity.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPvz indicates an expected call of GetAllPvz.
func (mr *MockrepositoryMockRecorder) GetAllPvz(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPvz", reflect.TypeOf((*Mockrepository)(nil).GetAllPvz), ctx)
}

// GetPvzList mocks base method.
func (m *Mockrepository) GetPvzList(ctx context.Context, filter entity.Filter) ([]entity.PvzInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvzList", ctx, filter)
	ret0, _ := ret[0].([]entity.PvzInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvzList indicates an expected call of GetPvzList.
func (mr *MockrepositoryMockRecorder) GetPvzList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvzList", reflect.TypeOf((*Mockrepository)(nil).GetPvzList), ctx, filter)
}

// GetUserByEmail mocks base method.
func (m *Mockrepository) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockrepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*Mockrepository)(nil).GetUserByEmail), ctx, email)
}

// LastReceptionStatus mocks base method.
func (m *Mockrepository) LastReceptionStatus(ctx context.Context, pvzUUID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastReceptionStatus", ctx, pvzUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastReceptionStatus indicates an expected call of LastReceptionStatus.
func (mr *MockrepositoryMockRecorder) LastReceptionStatus(ctx, pvzUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastReceptionStatus", reflect.TypeOf((*Mockrepository)(nil).LastReceptionStatus), ctx, pvzUUID)
}

// PvzExists mocks base method.
func (m *Mockrepository) PvzExists(ctx context.Context, id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PvzExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PvzExists indicates an expected call of PvzExists.
func (mr *MockrepositoryMockRecorder) PvzExists(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PvzExists", reflect.TypeOf((*Mockrepository)(nil).PvzExists), ctx, id)
}

// RoleExists mocks base method.
func (m *Mockrepository) RoleExists(ctx context.Context, role string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleExists", ctx, role)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleExists indicates an expected call of RoleExists.
func (mr *MockrepositoryMockRecorder) RoleExists(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleExists", reflect.TypeOf((*Mockrepository)(nil).RoleExists), ctx, role)
}

// UserExists mocks base method.
func (m *Mockrepository) UserExists(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockrepositoryMockRecorder) UserExists(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*Mockrepository)(nil).UserExists), ctx, email)
}

// MocktokenGenerator is a mock of tokenGenerator interface.
type MocktokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MocktokenGeneratorMockRecorder
}

// MocktokenGeneratorMockRecorder is the mock recorder for MocktokenGenerator.
type MocktokenGeneratorMockRecorder struct {
	mock *MocktokenGenerator
}

// NewMocktokenGenerator creates a new mock instance.
func NewMocktokenGenerator(ctrl *gomock.Controller) *MocktokenGenerator {
	mock := &MocktokenGenerator{ctrl: ctrl}
	mock.recorder = &MocktokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenGenerator) EXPECT() *MocktokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MocktokenGenerator) GenerateToken(userUUID, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userUUID, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MocktokenGeneratorMockRecorder) GenerateToken(userUUID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MocktokenGenerator)(nil).GenerateToken), userUUID, role)
}
