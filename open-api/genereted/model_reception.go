/*
backend service

Сервис для управления ПВЗ и приемкой товаров

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Reception type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reception{}

// Reception struct for Reception
type Reception struct {
	Id *string `json:"id,omitempty"`
	DateTime time.Time `json:"dateTime"`
	PvzId string `json:"pvzId"`
	Status string `json:"status"`
}

type _Reception Reception

// NewReception instantiates a new Reception object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReception(dateTime time.Time, pvzId string, status string) *Reception {
	this := Reception{}
	this.DateTime = dateTime
	this.PvzId = pvzId
	this.Status = status
	return &this
}

// NewReceptionWithDefaults instantiates a new Reception object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceptionWithDefaults() *Reception {
	this := Reception{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Reception) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reception) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Reception) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Reception) SetId(v string) {
	o.Id = &v
}

// GetDateTime returns the DateTime field value
func (o *Reception) GetDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value
// and a boolean to check if the value has been set.
func (o *Reception) GetDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateTime, true
}

// SetDateTime sets field value
func (o *Reception) SetDateTime(v time.Time) {
	o.DateTime = v
}

// GetPvzId returns the PvzId field value
func (o *Reception) GetPvzId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PvzId
}

// GetPvzIdOk returns a tuple with the PvzId field value
// and a boolean to check if the value has been set.
func (o *Reception) GetPvzIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PvzId, true
}

// SetPvzId sets field value
func (o *Reception) SetPvzId(v string) {
	o.PvzId = v
}

// GetStatus returns the Status field value
func (o *Reception) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Reception) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Reception) SetStatus(v string) {
	o.Status = v
}

func (o Reception) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reception) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["dateTime"] = o.DateTime
	toSerialize["pvzId"] = o.PvzId
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *Reception) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dateTime",
		"pvzId",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReception := _Reception{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReception)

	if err != nil {
		return err
	}

	*o = Reception(varReception)

	return err
}

type NullableReception struct {
	value *Reception
	isSet bool
}

func (v NullableReception) Get() *Reception {
	return v.value
}

func (v *NullableReception) Set(val *Reception) {
	v.value = val
	v.isSet = true
}

func (v NullableReception) IsSet() bool {
	return v.isSet
}

func (v *NullableReception) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReception(val *Reception) *NullableReception {
	return &NullableReception{value: val, isSet: true}
}

func (v NullableReception) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReception) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


