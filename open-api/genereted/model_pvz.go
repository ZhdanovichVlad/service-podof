/*
backend service

Сервис для управления ПВЗ и приемкой товаров

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PVZ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PVZ{}

// PVZ struct for PVZ
type PVZ struct {
	Id *string `json:"id,omitempty"`
	RegistrationDate *time.Time `json:"registrationDate,omitempty"`
	City string `json:"city"`
}

type _PVZ PVZ

// NewPVZ instantiates a new PVZ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPVZ(city string) *PVZ {
	this := PVZ{}
	this.City = city
	return &this
}

// NewPVZWithDefaults instantiates a new PVZ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPVZWithDefaults() *PVZ {
	this := PVZ{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PVZ) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PVZ) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PVZ) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PVZ) SetId(v string) {
	o.Id = &v
}

// GetRegistrationDate returns the RegistrationDate field value if set, zero value otherwise.
func (o *PVZ) GetRegistrationDate() time.Time {
	if o == nil || IsNil(o.RegistrationDate) {
		var ret time.Time
		return ret
	}
	return *o.RegistrationDate
}

// GetRegistrationDateOk returns a tuple with the RegistrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PVZ) GetRegistrationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RegistrationDate) {
		return nil, false
	}
	return o.RegistrationDate, true
}

// HasRegistrationDate returns a boolean if a field has been set.
func (o *PVZ) HasRegistrationDate() bool {
	if o != nil && !IsNil(o.RegistrationDate) {
		return true
	}

	return false
}

// SetRegistrationDate gets a reference to the given time.Time and assigns it to the RegistrationDate field.
func (o *PVZ) SetRegistrationDate(v time.Time) {
	o.RegistrationDate = &v
}

// GetCity returns the City field value
func (o *PVZ) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *PVZ) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *PVZ) SetCity(v string) {
	o.City = v
}

func (o PVZ) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PVZ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RegistrationDate) {
		toSerialize["registrationDate"] = o.RegistrationDate
	}
	toSerialize["city"] = o.City
	return toSerialize, nil
}

func (o *PVZ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPVZ := _PVZ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPVZ)

	if err != nil {
		return err
	}

	*o = PVZ(varPVZ)

	return err
}

type NullablePVZ struct {
	value *PVZ
	isSet bool
}

func (v NullablePVZ) Get() *PVZ {
	return v.value
}

func (v *NullablePVZ) Set(val *PVZ) {
	v.value = val
	v.isSet = true
}

func (v NullablePVZ) IsSet() bool {
	return v.isSet
}

func (v *NullablePVZ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePVZ(val *PVZ) *NullablePVZ {
	return &NullablePVZ{value: val, isSet: true}
}

func (v NullablePVZ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePVZ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


